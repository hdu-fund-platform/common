// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0--rc2
// source: protos/account.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	GetCustomInfo(ctx context.Context, in *GetCustomInfoRequest, opts ...grpc.CallOption) (*GetCustomInfoResponse, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	UpdateCustomInfo(ctx context.Context, in *UpdateCustomInfoRequest, opts ...grpc.CallOption) (*UpdateCustomInfoResponse, error)
	PullBackCustom(ctx context.Context, in *PullBackCustomRequest, opts ...grpc.CallOption) (*PullBackCustomResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) GetCustomInfo(ctx context.Context, in *GetCustomInfoRequest, opts ...grpc.CallOption) (*GetCustomInfoResponse, error) {
	out := new(GetCustomInfoResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/GetCustomInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateCustomInfo(ctx context.Context, in *UpdateCustomInfoRequest, opts ...grpc.CallOption) (*UpdateCustomInfoResponse, error) {
	out := new(UpdateCustomInfoResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/UpdateCustomInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) PullBackCustom(ctx context.Context, in *PullBackCustomRequest, opts ...grpc.CallOption) (*PullBackCustomResponse, error) {
	out := new(PullBackCustomResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/PullBackCustom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	GetCustomInfo(context.Context, *GetCustomInfoRequest) (*GetCustomInfoResponse, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	UpdateCustomInfo(context.Context, *UpdateCustomInfoRequest) (*UpdateCustomInfoResponse, error)
	PullBackCustom(context.Context, *PullBackCustomRequest) (*PullBackCustomResponse, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) GetCustomInfo(context.Context, *GetCustomInfoRequest) (*GetCustomInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomInfo not implemented")
}
func (UnimplementedAccountServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountServiceServer) UpdateCustomInfo(context.Context, *UpdateCustomInfoRequest) (*UpdateCustomInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomInfo not implemented")
}
func (UnimplementedAccountServiceServer) PullBackCustom(context.Context, *PullBackCustomRequest) (*PullBackCustomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullBackCustom not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_GetCustomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetCustomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/GetCustomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetCustomInfo(ctx, req.(*GetCustomInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateCustomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateCustomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/UpdateCustomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateCustomInfo(ctx, req.(*UpdateCustomInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_PullBackCustom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullBackCustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).PullBackCustom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/PullBackCustom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).PullBackCustom(ctx, req.(*PullBackCustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCustomInfo",
			Handler:    _AccountService_GetCustomInfo_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountService_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateCustomInfo",
			Handler:    _AccountService_UpdateCustomInfo_Handler,
		},
		{
			MethodName: "PullBackCustom",
			Handler:    _AccountService_PullBackCustom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/account.proto",
}

// RiskSetServiceClient is the client API for RiskSetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RiskSetServiceClient interface {
	SetRiskSet(ctx context.Context, in *SetRiskSetRequest, opts ...grpc.CallOption) (*SetRiskSetResponse, error)
	GetRiskSet(ctx context.Context, in *GetRiskSetRequest, opts ...grpc.CallOption) (*GetRiskSetResponse, error)
	SubmitAnswers(ctx context.Context, in *SubmitAnswersRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error)
}

type riskSetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRiskSetServiceClient(cc grpc.ClientConnInterface) RiskSetServiceClient {
	return &riskSetServiceClient{cc}
}

func (c *riskSetServiceClient) SetRiskSet(ctx context.Context, in *SetRiskSetRequest, opts ...grpc.CallOption) (*SetRiskSetResponse, error) {
	out := new(SetRiskSetResponse)
	err := c.cc.Invoke(ctx, "/account.RiskSetService/SetRiskSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskSetServiceClient) GetRiskSet(ctx context.Context, in *GetRiskSetRequest, opts ...grpc.CallOption) (*GetRiskSetResponse, error) {
	out := new(GetRiskSetResponse)
	err := c.cc.Invoke(ctx, "/account.RiskSetService/GetRiskSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskSetServiceClient) SubmitAnswers(ctx context.Context, in *SubmitAnswersRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error) {
	out := new(SubmitAnswerResponse)
	err := c.cc.Invoke(ctx, "/account.RiskSetService/SubmitAnswers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiskSetServiceServer is the server API for RiskSetService service.
// All implementations must embed UnimplementedRiskSetServiceServer
// for forward compatibility
type RiskSetServiceServer interface {
	SetRiskSet(context.Context, *SetRiskSetRequest) (*SetRiskSetResponse, error)
	GetRiskSet(context.Context, *GetRiskSetRequest) (*GetRiskSetResponse, error)
	SubmitAnswers(context.Context, *SubmitAnswersRequest) (*SubmitAnswerResponse, error)
	mustEmbedUnimplementedRiskSetServiceServer()
}

// UnimplementedRiskSetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRiskSetServiceServer struct {
}

func (UnimplementedRiskSetServiceServer) SetRiskSet(context.Context, *SetRiskSetRequest) (*SetRiskSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRiskSet not implemented")
}
func (UnimplementedRiskSetServiceServer) GetRiskSet(context.Context, *GetRiskSetRequest) (*GetRiskSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiskSet not implemented")
}
func (UnimplementedRiskSetServiceServer) SubmitAnswers(context.Context, *SubmitAnswersRequest) (*SubmitAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAnswers not implemented")
}
func (UnimplementedRiskSetServiceServer) mustEmbedUnimplementedRiskSetServiceServer() {}

// UnsafeRiskSetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiskSetServiceServer will
// result in compilation errors.
type UnsafeRiskSetServiceServer interface {
	mustEmbedUnimplementedRiskSetServiceServer()
}

func RegisterRiskSetServiceServer(s grpc.ServiceRegistrar, srv RiskSetServiceServer) {
	s.RegisterService(&RiskSetService_ServiceDesc, srv)
}

func _RiskSetService_SetRiskSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRiskSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskSetServiceServer).SetRiskSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.RiskSetService/SetRiskSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskSetServiceServer).SetRiskSet(ctx, req.(*SetRiskSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskSetService_GetRiskSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRiskSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskSetServiceServer).GetRiskSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.RiskSetService/GetRiskSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskSetServiceServer).GetRiskSet(ctx, req.(*GetRiskSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskSetService_SubmitAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskSetServiceServer).SubmitAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.RiskSetService/SubmitAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskSetServiceServer).SubmitAnswers(ctx, req.(*SubmitAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RiskSetService_ServiceDesc is the grpc.ServiceDesc for RiskSetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiskSetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.RiskSetService",
	HandlerType: (*RiskSetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRiskSet",
			Handler:    _RiskSetService_SetRiskSet_Handler,
		},
		{
			MethodName: "GetRiskSet",
			Handler:    _RiskSetService_GetRiskSet_Handler,
		},
		{
			MethodName: "SubmitAnswers",
			Handler:    _RiskSetService_SubmitAnswers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/account.proto",
}

// BankCardServiceClient is the client API for BankCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankCardServiceClient interface {
	GetBankBalance(ctx context.Context, in *GetBankBalanceRequest, opts ...grpc.CallOption) (*GetBankBalanceResponse, error)
	BindBankCard(ctx context.Context, in *BindBankCardRequest, opts ...grpc.CallOption) (*BindBankCardResponse, error)
	UnbindBankCard(ctx context.Context, in *UnbindBankCardRequest, opts ...grpc.CallOption) (*UnbindBankCardResponse, error)
}

type bankCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankCardServiceClient(cc grpc.ClientConnInterface) BankCardServiceClient {
	return &bankCardServiceClient{cc}
}

func (c *bankCardServiceClient) GetBankBalance(ctx context.Context, in *GetBankBalanceRequest, opts ...grpc.CallOption) (*GetBankBalanceResponse, error) {
	out := new(GetBankBalanceResponse)
	err := c.cc.Invoke(ctx, "/account.BankCardService/GetBankBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankCardServiceClient) BindBankCard(ctx context.Context, in *BindBankCardRequest, opts ...grpc.CallOption) (*BindBankCardResponse, error) {
	out := new(BindBankCardResponse)
	err := c.cc.Invoke(ctx, "/account.BankCardService/BindBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankCardServiceClient) UnbindBankCard(ctx context.Context, in *UnbindBankCardRequest, opts ...grpc.CallOption) (*UnbindBankCardResponse, error) {
	out := new(UnbindBankCardResponse)
	err := c.cc.Invoke(ctx, "/account.BankCardService/UnbindBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankCardServiceServer is the server API for BankCardService service.
// All implementations must embed UnimplementedBankCardServiceServer
// for forward compatibility
type BankCardServiceServer interface {
	GetBankBalance(context.Context, *GetBankBalanceRequest) (*GetBankBalanceResponse, error)
	BindBankCard(context.Context, *BindBankCardRequest) (*BindBankCardResponse, error)
	UnbindBankCard(context.Context, *UnbindBankCardRequest) (*UnbindBankCardResponse, error)
	mustEmbedUnimplementedBankCardServiceServer()
}

// UnimplementedBankCardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBankCardServiceServer struct {
}

func (UnimplementedBankCardServiceServer) GetBankBalance(context.Context, *GetBankBalanceRequest) (*GetBankBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankBalance not implemented")
}
func (UnimplementedBankCardServiceServer) BindBankCard(context.Context, *BindBankCardRequest) (*BindBankCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindBankCard not implemented")
}
func (UnimplementedBankCardServiceServer) UnbindBankCard(context.Context, *UnbindBankCardRequest) (*UnbindBankCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindBankCard not implemented")
}
func (UnimplementedBankCardServiceServer) mustEmbedUnimplementedBankCardServiceServer() {}

// UnsafeBankCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankCardServiceServer will
// result in compilation errors.
type UnsafeBankCardServiceServer interface {
	mustEmbedUnimplementedBankCardServiceServer()
}

func RegisterBankCardServiceServer(s grpc.ServiceRegistrar, srv BankCardServiceServer) {
	s.RegisterService(&BankCardService_ServiceDesc, srv)
}

func _BankCardService_GetBankBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServiceServer).GetBankBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.BankCardService/GetBankBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServiceServer).GetBankBalance(ctx, req.(*GetBankBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankCardService_BindBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindBankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServiceServer).BindBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.BankCardService/BindBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServiceServer).BindBankCard(ctx, req.(*BindBankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankCardService_UnbindBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindBankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServiceServer).UnbindBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.BankCardService/UnbindBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServiceServer).UnbindBankCard(ctx, req.(*UnbindBankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankCardService_ServiceDesc is the grpc.ServiceDesc for BankCardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankCardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.BankCardService",
	HandlerType: (*BankCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBankBalance",
			Handler:    _BankCardService_GetBankBalance_Handler,
		},
		{
			MethodName: "BindBankCard",
			Handler:    _BankCardService_BindBankCard_Handler,
		},
		{
			MethodName: "UnbindBankCard",
			Handler:    _BankCardService_UnbindBankCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/account.proto",
}
