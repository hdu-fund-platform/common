// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0--rc2
// source: protos/account.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountClient is the client API for Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountClient interface {
	GetCustomInfo(ctx context.Context, in *GetCustomInfoRequest, opts ...grpc.CallOption) (*GetCustomInfoResponse, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	UpdateCustomInfo(ctx context.Context, in *UpdateCustomInfoRequest, opts ...grpc.CallOption) (*UpdateCustomInfoResponse, error)
	PullBackCustom(ctx context.Context, in *PullBackCustomRequest, opts ...grpc.CallOption) (*PullBackCustomResponse, error)
}

type accountClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountClient(cc grpc.ClientConnInterface) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) GetCustomInfo(ctx context.Context, in *GetCustomInfoRequest, opts ...grpc.CallOption) (*GetCustomInfoResponse, error) {
	out := new(GetCustomInfoResponse)
	err := c.cc.Invoke(ctx, "/account.Account/GetCustomInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/account.Account/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UpdateCustomInfo(ctx context.Context, in *UpdateCustomInfoRequest, opts ...grpc.CallOption) (*UpdateCustomInfoResponse, error) {
	out := new(UpdateCustomInfoResponse)
	err := c.cc.Invoke(ctx, "/account.Account/UpdateCustomInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) PullBackCustom(ctx context.Context, in *PullBackCustomRequest, opts ...grpc.CallOption) (*PullBackCustomResponse, error) {
	out := new(PullBackCustomResponse)
	err := c.cc.Invoke(ctx, "/account.Account/PullBackCustom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServer is the server API for Account service.
// All implementations must embed UnimplementedAccountServer
// for forward compatibility
type AccountServer interface {
	GetCustomInfo(context.Context, *GetCustomInfoRequest) (*GetCustomInfoResponse, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	UpdateCustomInfo(context.Context, *UpdateCustomInfoRequest) (*UpdateCustomInfoResponse, error)
	PullBackCustom(context.Context, *PullBackCustomRequest) (*PullBackCustomResponse, error)
	mustEmbedUnimplementedAccountServer()
}

// UnimplementedAccountServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServer struct {
}

func (UnimplementedAccountServer) GetCustomInfo(context.Context, *GetCustomInfoRequest) (*GetCustomInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomInfo not implemented")
}
func (UnimplementedAccountServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountServer) UpdateCustomInfo(context.Context, *UpdateCustomInfoRequest) (*UpdateCustomInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomInfo not implemented")
}
func (UnimplementedAccountServer) PullBackCustom(context.Context, *PullBackCustomRequest) (*PullBackCustomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullBackCustom not implemented")
}
func (UnimplementedAccountServer) mustEmbedUnimplementedAccountServer() {}

// UnsafeAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServer will
// result in compilation errors.
type UnsafeAccountServer interface {
	mustEmbedUnimplementedAccountServer()
}

func RegisterAccountServer(s grpc.ServiceRegistrar, srv AccountServer) {
	s.RegisterService(&Account_ServiceDesc, srv)
}

func _Account_GetCustomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetCustomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/GetCustomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetCustomInfo(ctx, req.(*GetCustomInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UpdateCustomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UpdateCustomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/UpdateCustomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UpdateCustomInfo(ctx, req.(*UpdateCustomInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_PullBackCustom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullBackCustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).PullBackCustom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/PullBackCustom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).PullBackCustom(ctx, req.(*PullBackCustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Account_ServiceDesc is the grpc.ServiceDesc for Account service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Account_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCustomInfo",
			Handler:    _Account_GetCustomInfo_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Account_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateCustomInfo",
			Handler:    _Account_UpdateCustomInfo_Handler,
		},
		{
			MethodName: "PullBackCustom",
			Handler:    _Account_PullBackCustom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/account.proto",
}

// RiskSetClient is the client API for RiskSet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RiskSetClient interface {
	SetRiskSet(ctx context.Context, in *SetRiskSetRequest, opts ...grpc.CallOption) (*SetRiskSetResponse, error)
	GetRiskSet(ctx context.Context, in *GetRiskSetRequest, opts ...grpc.CallOption) (*GetRiskSetResponse, error)
	SubmitAnswers(ctx context.Context, in *SubmitAnswersRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error)
}

type riskSetClient struct {
	cc grpc.ClientConnInterface
}

func NewRiskSetClient(cc grpc.ClientConnInterface) RiskSetClient {
	return &riskSetClient{cc}
}

func (c *riskSetClient) SetRiskSet(ctx context.Context, in *SetRiskSetRequest, opts ...grpc.CallOption) (*SetRiskSetResponse, error) {
	out := new(SetRiskSetResponse)
	err := c.cc.Invoke(ctx, "/account.RiskSet/SetRiskSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskSetClient) GetRiskSet(ctx context.Context, in *GetRiskSetRequest, opts ...grpc.CallOption) (*GetRiskSetResponse, error) {
	out := new(GetRiskSetResponse)
	err := c.cc.Invoke(ctx, "/account.RiskSet/GetRiskSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskSetClient) SubmitAnswers(ctx context.Context, in *SubmitAnswersRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error) {
	out := new(SubmitAnswerResponse)
	err := c.cc.Invoke(ctx, "/account.RiskSet/SubmitAnswers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiskSetServer is the server API for RiskSet service.
// All implementations must embed UnimplementedRiskSetServer
// for forward compatibility
type RiskSetServer interface {
	SetRiskSet(context.Context, *SetRiskSetRequest) (*SetRiskSetResponse, error)
	GetRiskSet(context.Context, *GetRiskSetRequest) (*GetRiskSetResponse, error)
	SubmitAnswers(context.Context, *SubmitAnswersRequest) (*SubmitAnswerResponse, error)
	mustEmbedUnimplementedRiskSetServer()
}

// UnimplementedRiskSetServer must be embedded to have forward compatible implementations.
type UnimplementedRiskSetServer struct {
}

func (UnimplementedRiskSetServer) SetRiskSet(context.Context, *SetRiskSetRequest) (*SetRiskSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRiskSet not implemented")
}
func (UnimplementedRiskSetServer) GetRiskSet(context.Context, *GetRiskSetRequest) (*GetRiskSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiskSet not implemented")
}
func (UnimplementedRiskSetServer) SubmitAnswers(context.Context, *SubmitAnswersRequest) (*SubmitAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAnswers not implemented")
}
func (UnimplementedRiskSetServer) mustEmbedUnimplementedRiskSetServer() {}

// UnsafeRiskSetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiskSetServer will
// result in compilation errors.
type UnsafeRiskSetServer interface {
	mustEmbedUnimplementedRiskSetServer()
}

func RegisterRiskSetServer(s grpc.ServiceRegistrar, srv RiskSetServer) {
	s.RegisterService(&RiskSet_ServiceDesc, srv)
}

func _RiskSet_SetRiskSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRiskSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskSetServer).SetRiskSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.RiskSet/SetRiskSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskSetServer).SetRiskSet(ctx, req.(*SetRiskSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskSet_GetRiskSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRiskSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskSetServer).GetRiskSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.RiskSet/GetRiskSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskSetServer).GetRiskSet(ctx, req.(*GetRiskSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiskSet_SubmitAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskSetServer).SubmitAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.RiskSet/SubmitAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskSetServer).SubmitAnswers(ctx, req.(*SubmitAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RiskSet_ServiceDesc is the grpc.ServiceDesc for RiskSet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiskSet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.RiskSet",
	HandlerType: (*RiskSetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRiskSet",
			Handler:    _RiskSet_SetRiskSet_Handler,
		},
		{
			MethodName: "GetRiskSet",
			Handler:    _RiskSet_GetRiskSet_Handler,
		},
		{
			MethodName: "SubmitAnswers",
			Handler:    _RiskSet_SubmitAnswers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/account.proto",
}

// BankCardClient is the client API for BankCard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankCardClient interface {
	GetBankBalance(ctx context.Context, in *GetBankBalanceRequest, opts ...grpc.CallOption) (*GetBankBalanceResponse, error)
	BindBankCard(ctx context.Context, in *BindBankCardRequest, opts ...grpc.CallOption) (*BindBankCardResponse, error)
	UnbindBankCard(ctx context.Context, in *UnbindBankCardRequest, opts ...grpc.CallOption) (*UnbindBankCardResponse, error)
}

type bankCardClient struct {
	cc grpc.ClientConnInterface
}

func NewBankCardClient(cc grpc.ClientConnInterface) BankCardClient {
	return &bankCardClient{cc}
}

func (c *bankCardClient) GetBankBalance(ctx context.Context, in *GetBankBalanceRequest, opts ...grpc.CallOption) (*GetBankBalanceResponse, error) {
	out := new(GetBankBalanceResponse)
	err := c.cc.Invoke(ctx, "/account.BankCard/GetBankBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankCardClient) BindBankCard(ctx context.Context, in *BindBankCardRequest, opts ...grpc.CallOption) (*BindBankCardResponse, error) {
	out := new(BindBankCardResponse)
	err := c.cc.Invoke(ctx, "/account.BankCard/BindBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankCardClient) UnbindBankCard(ctx context.Context, in *UnbindBankCardRequest, opts ...grpc.CallOption) (*UnbindBankCardResponse, error) {
	out := new(UnbindBankCardResponse)
	err := c.cc.Invoke(ctx, "/account.BankCard/UnbindBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankCardServer is the server API for BankCard service.
// All implementations must embed UnimplementedBankCardServer
// for forward compatibility
type BankCardServer interface {
	GetBankBalance(context.Context, *GetBankBalanceRequest) (*GetBankBalanceResponse, error)
	BindBankCard(context.Context, *BindBankCardRequest) (*BindBankCardResponse, error)
	UnbindBankCard(context.Context, *UnbindBankCardRequest) (*UnbindBankCardResponse, error)
	mustEmbedUnimplementedBankCardServer()
}

// UnimplementedBankCardServer must be embedded to have forward compatible implementations.
type UnimplementedBankCardServer struct {
}

func (UnimplementedBankCardServer) GetBankBalance(context.Context, *GetBankBalanceRequest) (*GetBankBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankBalance not implemented")
}
func (UnimplementedBankCardServer) BindBankCard(context.Context, *BindBankCardRequest) (*BindBankCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindBankCard not implemented")
}
func (UnimplementedBankCardServer) UnbindBankCard(context.Context, *UnbindBankCardRequest) (*UnbindBankCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindBankCard not implemented")
}
func (UnimplementedBankCardServer) mustEmbedUnimplementedBankCardServer() {}

// UnsafeBankCardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankCardServer will
// result in compilation errors.
type UnsafeBankCardServer interface {
	mustEmbedUnimplementedBankCardServer()
}

func RegisterBankCardServer(s grpc.ServiceRegistrar, srv BankCardServer) {
	s.RegisterService(&BankCard_ServiceDesc, srv)
}

func _BankCard_GetBankBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServer).GetBankBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.BankCard/GetBankBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServer).GetBankBalance(ctx, req.(*GetBankBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankCard_BindBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindBankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServer).BindBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.BankCard/BindBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServer).BindBankCard(ctx, req.(*BindBankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankCard_UnbindBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindBankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankCardServer).UnbindBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.BankCard/UnbindBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankCardServer).UnbindBankCard(ctx, req.(*UnbindBankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankCard_ServiceDesc is the grpc.ServiceDesc for BankCard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankCard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.BankCard",
	HandlerType: (*BankCardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBankBalance",
			Handler:    _BankCard_GetBankBalance_Handler,
		},
		{
			MethodName: "BindBankCard",
			Handler:    _BankCard_BindBankCard_Handler,
		},
		{
			MethodName: "UnbindBankCard",
			Handler:    _BankCard_UnbindBankCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/account.proto",
}
